============================================
Numbers
============================================
400;
0400;

-----
(program
  (expression_statement
    (number)
    (empty_statement))
  (expression_statement
    (number)
    (empty_statement)))
 





==========================================
Strings 
==========================================
"hello";
"hello // \n commment \" ";
"hello:s";

----
(program
  (expression_statement
    (string
      (string_fragment))
    (empty_statement)
  ) 
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment)
      (escape_sequence)
      (string_fragment)
      )
       (empty_statement))
      (expression_statement
        (string
          (string_fragment)) 
        (empty_statement))
)




==========================================
Symbol 
==========================================
status = :Work;

_offscreenBuffer = new Graphics.BufferedBitmap({
  :width => dc.getWidth(),
  :palette => [
    Graphics.COLOR_BLACK,
    Graphics.COLOR_WHITE,
  ] as Array<ColorValue>,
});

_dateBuffer = new Graphics.BufferedBitmap({
    :width => dc.getWidth(),
    :height => Graphics.getFontHeight(Graphics.FONT_MEDIUM),
});

 
----------
(program
  (expression_statement
    (assignment_expression
      (pattern
        (identifier))
      (symbol))
    (empty_statement))
  (expression_statement
    (assignment_expression
      (pattern
        (identifier))
      (new_expression
        (call_expression
          (member_expression
            (identifier)
            (property_identifier))
          (arguments
            (dictionary
              (pair
                (symbol)
                (call_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (arguments)))
              (pair
                (symbol)
                (typed_array
                  (array
                    (member_expression
                      (identifier)
                      (property_identifier))
                    (member_expression
                      (identifier)
                      (property_identifier)))
                  (type
                    (generic_type
                      (type_identifier)
                      (type_arguments
                        (type
                          (identifier))))))))))))
    (empty_statement))
  (expression_statement
    (assignment_expression
      (pattern
        (identifier))
      (new_expression
        (call_expression
          (member_expression
            (identifier)
            (property_identifier))
          (arguments
            (dictionary
              (pair
                (symbol)
                (call_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (arguments)))
              (pair
                (symbol)
                (call_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (arguments
                    (member_expression
                      (identifier)
                      (property_identifier))))))))))
    (empty_statement)))

