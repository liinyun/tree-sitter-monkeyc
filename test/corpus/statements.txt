============================================
Imports
============================================

import Toybox.Lang;

------

(program
  (import_statement
    (dotted_name
      (identifier)
      (identifier)
      )))



============================================
Using statement
============================================

using Toybox.WatchUi;
using Toybox.ActivityRecording as ActivityRecording;

-----

(program
  (using_statement
    (dotted_name
      (identifier)
      (identifier)
    )
  )
  (using_statement
    (dotted_name
      (identifier)
      (identifier)
    )
    (identifier)
  )
)



============================================
Variable declarations
============================================
var x as FontResource = 1;
private var _fullScreenRefresh as Boolean;

--------
(program
  (variable_declaration
    (variable_declarator
      (identifier)
      (type
        (assignment_expression
          (pattern
            (identifier))
          (number)))))
  (variable_declaration
    (modifiers)
    (variable_declarator
      (identifier)
      (type
        (identifier)))))



============================================
Assignments
============================================
private var _font as FontResource?;
private var _screenCenterPoint as Array<Number>?;
var cos = Math.cos(angle);
var x = coords[i][0] * cos - coords[i][1] * sin + 0.5;
var result = new Array<Array<Float> >[4];
var coords =
    [
        [-(width / 2), tailLength] as Array<Number>,
        [-(width / 2), -handLength] as Array<Number>,
        [width / 2, -handLength] as Array<Number>,
        [width / 2, tailLength] as Array<Number>,
    ] as Array<Array<Number> >;

 

_fullScreenRefresh = true;
_screenShape = System.getDeviceSettings().screenShape;




============================================
If statements
============================================

if (x) {
  log(y);
}

if (a.b) {
  log(c);
  d;
}


----

(program
  (if_statement
    condition: (parenthesized_expression
      (identifier))
    consequence: 
    (statement_block
      (expression_statement
        (call_expression
          function: (identifier) 
          arguments: (arguments
            (identifier)))
        (empty_statement))))
  (if_statement
    condition: (parenthesized_expression
      (member_expression
        object: (identifier)
        property: (property_identifier)))

    consequence: (statement_block
      (expression_statement
        (call_expression
          function: (identifier)
          arguments: (arguments
            (identifier)))
          (empty_statement)
            )
      (expression_statement
        (identifier)
        (empty_statement))))
  )





============================================
If-else statements
============================================

if (x) {
  y;
}
else if (a) {
  b;
}

if (a) {
  c;
  d;
} else {
  e;
}

----

(program
  (if_statement
    condition: (parenthesized_expression
      (identifier))
    consequence: (statement_block
      (expression_statement
        (identifier)
      (empty_statement))) 
    alternative: (else_clause
      (if_statement
        condition: (parenthesized_expression
          (identifier))
        consequence: (statement_block
          (expression_statement
          (identifier)
          (empty_statement)
        ) ))))
  (if_statement
    condition: (parenthesized_expression
      (identifier))
    consequence: (statement_block
      (expression_statement
        (identifier)
        (empty_statement))
      (expression_statement
        (identifier)
        (empty_statement)))
    alternative: (else_clause
      (statement_block
        (expression_statement
          (identifier)
          (empty_statement))))))



============================================
For statements
============================================

for (var i = 0; i < 4; i++) {
  e;
}

for (
    var i = Math.PI / 6;
    i <= (11 * Math.PI) / 6;
    i += Math.PI / 3
) {
    // Partially unrolled loop to draw two tickmarks in 15 minute block.
    dc.drawLine(sX, sY, eX, eY);
}

-----
(program
  (for_statement
    initializer: (variable_declaration
      (variable_declarator
        name: (identifier)
        value: (number)))
    condition: (binary_expression
      left: (identifier)
      right: (number))
    increment: (update_expression
      argument: (identifier))
    body: (statement_block
      (expression_statement
        (identifier)
      (empty_statement))))
  (for_statement
    initializer: (variable_declaration
      (variable_declarator
        name: (identifier)
        value: (binary_expression
          left: (member_expression
                object: (identifier)
                property: (property_identifier))
          right: (number))
        )
      )
    condition: (binary_expression
      left: (identifier)
      right: (binary_expression
        left: (parenthesized_expression
          (binary_expression
            left: (number)
            right: (member_expression
              object: (identifier)
              property: (property_identifier))))
        right: (number)))
    increment: (augmented_assignment_expression
      left: (pattern
        (identifier))
      right: (binary_expression
        left: (member_expression
          object: (identifier)
          property: (property_identifier))
        right: (number)))
    body: (statement_block
      (comment)
      (expression_statement
        (call_expression
          function: (member_expression
            object: (identifier)
            property: (property_identifier))
          arguments: (arguments
            (identifier)
            (identifier)
            (identifier)
            (identifier)))
        (empty_statement)))))






============================================
While statements
============================================
while (a) {
  b();
}

-----

(program 
  (while_statement
    condition: (parenthesized_expression
      (identifier))
    body: (statement_block
      (expression_statement
        (call_expression
          function: (identifier)
          arguments: (arguments))
      (empty_statement)))))




============================================
Do statements
============================================

do {
  a;
} while (b)

-----
(program
  (do_statement
    body: (statement_block
      (expression_statement
        (identifier)
        (empty_statement)
        ))
    condition: (parenthesized_expression
      (identifier))))



============================================
Return statements
============================================
return;
return 5;

-----
(program
  (return_statement)
  (return_statement
    (number))
) 






============================================
Comments
============================================




==========================================
Comments between statements
==========================================








============================================
Comments with asterisks
============================================






==========================================
Comments within expressions
==========================================

y; // comment

---------
(program
  (expression_statement
    (identifier)
    (empty_statement))
    (comment))






============================================
Switch statements
============================================
switch ( obj ) {
    case true:
    // Do something
    break;
    case 1:
    // Do something
    break;
    case "B": {
        // Do something
        break;
    }
    // Executed based on the type
    // instead of the value
    case instanceof MyClass:
    // Do something
    break;
    default:
    // If all else fails
    break;
}

// Monkey C also supports fall-through into the next case statement
switch ( obj ) {
    case false:
    // Do something
    // Fall through and execute the code in the next case block
    case 2: {
        // Do something
        break;
    }
    case instanceof MyOtherClass:
    // Do something
    break;
    case "B":
    // Do something
    // Fall through and execute the code in the default block
    default:
    // If all else fails
    break;
}

-----
(program
  (switch_statement
    (parenthesized_expression
      (identifier))
    (switch_body
      (switch_case
        (true)
        (comment)
        (break_statement))
      (switch_case
        (number)
        (comment)
        (break_statement))
      (switch_case
        (string
          (string_fragment))
        (statement_block
          (comment)
          (break_statement)))
      (comment)
      (comment)
      (switch_case
        (unary_expression
        (identifier))
        (comment)
        (break_statement))
      (switch_default
        (comment)
        (break_statement))))
  (comment)
  (switch_statement
    (parenthesized_expression
      (identifier))
    (switch_body
      (switch_case
        (false))
      (comment)
      (comment)
      (switch_case
        (number)
        (statement_block
          (comment)
          (break_statement)))
      (switch_case
        (unary_expression
         (identifier))
        (comment)
        (break_statement))
      (switch_case
        (string
          (string_fragment)))
      (comment)
      (comment)
      (switch_default
        (comment)
        (break_statement)))))
 

============================================
Throw statements
============================================

throw new Error("uh oh");

-----

(program
  (throw_statement
    (new_expression
      (identifier)
      (arguments
        (string
          (string_fragment))))))




============================================
Throw statements with sequence expressions
============================================






============================================
Try catch finally statements
============================================
try {
    // Code to execute
}
catch( ex instanceof AnExceptionClass ) {
    // Code to handle the throw of AnExceptionClass
}
catch( ex ) {
    // Code to catch all execeptions
}
finally {
    // Code to execute when
}

------
(program
  (try_statement
    (statement_block
      (comment))
    (catch_clause
      (binary_expression
        (identifier)
        (identifier))
      (statement_block
        (comment)))
    (catch_clause
      (identifier)
      (statement_block
        (comment)))
    (finally_clause
      (statement_block
        (comment)))))




============================================
Empty statements
============================================



============================================
Print statements
============================================
print("hello");
System.println(
    "Average execution time: " + powerInfo.executionTimeAverage
);
 
-----
(program
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (string
          (string_fragment))))
    (empty_statement))
  (expression_statement
    (call_expression
      (member_expression
        (identifier)
        (property_identifier))
      (arguments
        (binary_expression
          (string
            (string_fragment))
          (member_expression
            (identifier)
            (property_identifier)))))
    (empty_statement)))










