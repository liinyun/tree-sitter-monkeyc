============================================
Functions
============================================
function initialize(a as Lang.Number ,b) {}
function init(a,b) {
  var c = 2;
	MenuInputDelegate.initializ();
}
-----
(program
  (function_declaration
    (identifier)
    (formal_parameters
      (parameter
        (typed_parameter
          (identifier)
          (type
            (member_type
              (type
                (identifier))
              (type
                (identifier))))))
       (parameter
        (identifier)))
    (statement_block))

  (function_declaration
    (identifier)
    (formal_parameters
      (parameter
        (identifier))
      (parameter
        (identifier)))
  (statement_block
      (variable_declaration
        (variable_declarator
          (identifier)
          (number)
        )
      )
      (expression_statement
        (call_expression
          (member_expression
            (identifier)
            (property_identifier))
          (arguments))
        (empty_statement)
      ) 
    )
  )
)



==============================================
Method to be tested
==============================================



============================================
Method pass
============================================
function num3(x as Number) as Method(x as String) as Void {
    System.println(x);
    return method(:str);
}

function methodTest1(m as Method(x as Number) as Void or Method(x as String) as Void, p as Number or String) as Void {
    (m as Method(x as Number) as Void).invoke(p);
}

function methodTest2(m as Method(x as Number) as Null or Method(x as String) as Void, p as Number, s as String) as Void {
    var m2 = m.invoke(p);
    if (m2) {
        m2.invoke(s);
    }
}

class a {
(:test)
function runTests(logger as Logger) as Boolean {
    var tests = getExprs();
    var ok = true;
    for (var i = 0; i < tests.size(); i++) {
        if (
            !check(
                logger,
                i as Number,
                tests[i][0],
                tests[i][1]
            )
        ) {
            ok = false;
        }
    }

    (new MethodTests()).tests();
    return ok;
}}



============================================
Method test
============================================
// checking that comments in odd places don't crash
// the formatter.
(/*bar*/ :background_app /*baz*/) // boo
// biz
module Bar {
    typedef /* foo */ Foo as Number;
}
------



============================================
Property access
============================================
x.someProperty;

(program
  (expression_statement
    (dotted_name
      (identifier)
      (identifier))
    (empty_statement)
      ) 
)





============================================
Chained Property access
============================================






============================================
Function calls
============================================
generateHandCoordinates(
    _screenCenterPoint,
    secondHand,
    60,
    20,
    2
);

---------
(program
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (identifier)
        (identifier)
        (number)
        (number)
        (number) 
      )
    )
  (empty_statement)
  )
)
 




============================================
Constructor calls
============================================
new module.Klass(1, "two");
new Thing();

-----
(program
  (expression_statement
    (new_expression
      (call_expression
        (member_expression
          (identifier)
          (property_identifier))
      (arguments
        (number)
        (string
          (string_fragment)))))
    (empty_statement))
  (expression_statement
    (new_expression
      (call_expression
        (identifier)
        (arguments)))
      (empty_statement))
)


============================================
Classes
============================================
class StopMenuDelegate {
	function initclass() {
		MenuInputDelegate.initializ();
	}
}
(:debug) class TestMethods
{
    (:test) static function testThisClass( x ) {
      System.println(x);
    }
}

-----
(program
  (class_declaration
    (identifier) 
    (class_body
      (method_definition
        (property_identifier)
        (formal_parameters)
        (statement_block 
          (expression_statement
          (call_expression
            (member_expression
              (identifier)
              (property_identifier))
            (arguments))
            (empty_statement))))))
  (class_declaration
    (annotation
      (annotation_keywords))
    (identifier)
    (class_body
      (method_definition
        (annotation
          (annotation_keywords))
        (modifiers)
        (property_identifier)
        (formal_parameters
          (parameter
            (identifier)))
        (statement_block
          (expression_statement
            (call_expression
              (member_expression
                (identifier)
                (property_identifier))
              (arguments
                (identifier)))

        (empty_statement))))))

)




============================================
Class Property Fields
============================================
class Foo
{
    public const publicVar;
    protected var _protectedVar;
    private var _privateVar;

    public function initialize() {
        publicVar = "a";
        _protectedVar = "b";
        _privateVar = "c";
    }
}

------

(program
  (class_declaration
    (identifier)
    (class_body
      (field_definition
        (modifiers)
        (property_identifier))
      (field_definition
        (modifiers)
        (property_identifier))
      (field_definition
        (modifiers)
        (property_identifier))
      (method_definition
        (modifiers)
        (property_identifier)
        (formal_parameters)
        (statement_block
          (expression_statement
            (assignment_expression
              (pattern
                (identifier))
              (string
                (string_fragment)))
            (empty_statement))
          (expression_statement
            (assignment_expression
              (pattern
                (identifier))
              (string
                (string_fragment)))
            (empty_statement))
          (expression_statement
            (assignment_expression
              (pattern
                (identifier))
              (string
                (string_fragment)))
            (empty_statement)))))))




============================================
Private Class Property Fields
============================================





============================================
Arrays
============================================






============================================
Math operators
============================================

i++;
i--;
i + j * 3 - j % 5;

------
(program
  (expression_statement
    (update_expression
      (identifier))
    (empty_statement))
    (expression_statement
    (update_expression
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (binary_expression
          (identifier)
          (number)))
      (binary_expression
        (identifier)
        (number)))
        (empty_statement)
  )
)





============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

----------

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (binary_expression
        (unary_expression
          (identifier))
        (unary_expression
          (identifier)))
      (binary_expression
        (unary_expression
          (identifier))
        (unary_expression
          (identifier))))
    (empty_statement)
          ))



============================================
Bitwise operators
============================================

i >> j;
i << j;
i & j;
i | j;
~i ^ ~j;
-----

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
  (empty_statement)) 
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (unary_expression
        (identifier))
      (unary_expression
        (identifier)))
    (empty_statement)
        ))





============================================
Relational operators
============================================
x < y;
x <= y;
x == y;
x != y;
x >= y;
x > y;

---

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
)



==============================================
Assignment
==============================================
x = 0;
x.y = 0;

result[i] =
  [centerpoint[0] + x, centerpoint[1] + y] as array<float>;

dc.fillPolygon(
    [
        [coords[i] - 1, 2] as Array<Float or Number>,
        [upperX - 1, 12] as Array<Float or Number>,
    ] as Array<Array<Float or Number> >
);
 



------
(program
  (expression_statement
    (assignment_expression
      (pattern
        (identifier))
      (number))
    (empty_statement))
  (expression_statement
    (assignment_expression
      (pattern
        (member_expression
          (identifier)
          (property_identifier)))
      (number))
    (empty_statement))
  (expression_statement
    (assignment_expression
      (pattern
        (array_access
          (identifier)
          (identifier)))
      (typed_array
        (array
          (binary_expression
            (array_access
              (identifier)
              (number))
            (identifier))
          (binary_expression
            (array_access
              (identifier)
              (number))
            (identifier)))
        (type
          (generic_type
            (type_identifier)
            (type_arguments
              (type
                (identifier)))))))
    (empty_statement))
  (expression_statement
    (call_expression
      (member_expression
        (identifier)
        (property_identifier))
      (arguments
        (typed_array
          (array
            (typed_array
              (array
                (binary_expression
                  (array_access
                    (identifier)
                    (identifier))
                  (number))
                (number))
              (type
                (generic_type
                  (type_identifier)
                  (type_arguments
                    (type
                      (union_type
                        (type
                          (identifier))
                        (type
                          (identifier))))))))
            (typed_array
              (array
                (binary_expression
                  (identifier)
                  (number))
                (number))
              (type
                (generic_type
                  (type_identifier)
                  (type_arguments
                    (type
                      (union_type
                        (type
                          (identifier))
                        (type
                          (identifier)))))))))
          (type
            (generic_type
              (type_identifier)
              (type_arguments
                (type
                  (generic_type
                    (type_identifier)
                    (type_arguments
                      (type
                        (union_type
                          (type
                            (identifier))
                          (type
                            (identifier)))))))))))))
    (empty_statement)))

==============================================
Ternaries
==============================================








==============================================
Type operators
==============================================

x instanceof String;
------

(program
 (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      ))



==============================================
Augmented assignments
==============================================

s |= 1;
t %= 2;
w ^= 3;
x += 4;
y.z *= 5;
async += 1;

---

(program
  (expression_statement
    (augmented_assignment_expression
      (pattern
      (identifier))
      (number))
    (empty_statement))
  (expression_statement
    (augmented_assignment_expression
      (pattern
      (identifier))
      (number))
    (empty_statement)
      )
  (expression_statement
    (augmented_assignment_expression
      (pattern
       (identifier))
      (number))
    (empty_statement)
      )
  (expression_statement
    (augmented_assignment_expression
      (pattern
       (identifier))
      (number))
    (empty_statement)
      )
  
  (expression_statement
    (augmented_assignment_expression
      (pattern
        (member_expression
        (identifier)
        (property_identifier)))
      (number))
    (empty_statement)
      )

  (expression_statement
    (augmented_assignment_expression
      (pattern
       (identifier))
      (number))
    (empty_statement)
      )
)

============================================
Has operators
============================================
_partialUpdatesAllowed = WatchUi.WatchFace has :onPartialUpdate;
if (System.getDeviceSettings() has :doNotDisturb) {
    _dndIcon =
        WatchUi.loadResource($.Rez.Drawables.DoNotDisturbIcon) as
        BitmapResource;
} else {
    _dndIcon = null;
}

-----
(program
  (expression_statement
    (assignment_expression
      (pattern
        (identifier))
      (binary_expression
        (member_expression
          (identifier)
          (property_identifier))
        (symbol)))
    (empty_statement))
  (if_statement
    (parenthesized_expression
      (binary_expression
        (call_expression
          (member_expression
            (identifier)
            (property_identifier))
          (arguments))
        (symbol)))
    (statement_block
      (expression_statement
        (assignment_expression
          (pattern
            (identifier))
          (call_expression
            (member_expression
              (identifier)
              (property_identifier))
            (arguments
              (member_expression
                (member_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (property_identifier))
                (property_identifier))))
          (type
            (identifier)))
        (empty_statement)))
    (else_clause
      (statement_block
        (expression_statement
          (assignment_expression
            (pattern
              (identifier))
            (null))
          (empty_statement))))))


============================================
Ternary operators
============================================
var result = a ? 1 : 2;
-----
(program
  (variable_declaration
    (variable_declarator
      (identifier)
      (ternary_expression
        (identifier)
        (number)
        (number)))))



==============================================
Operator precedence
==============================================

a <= b && c >= d;
a && b(c) && d;
a && b | c;
a - b << c;
a() + c.d;

-----

(program
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (identifier))
      (binary_expression
        (identifier)
        (identifier)))
    (empty_statement)
        )
  
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (identifier))))
      (identifier))
    (empty_statement))
 
  (expression_statement
    (binary_expression
      (identifier)
      (binary_expression
        (identifier)
        (identifier)))
    (empty_statement)
        )
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (identifier))
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (call_expression
        (identifier)
        (arguments))
      (member_expression
        (identifier)
        (property_identifier)))
    (empty_statement))
  )



==============================================
Forward slashes after parenthesized expressions
==============================================

(foo - bar) / baz;

---

(program
  (expression_statement
    (binary_expression
      (parenthesized_expression
        (binary_expression
          (identifier)
          (identifier)))
      (identifier))
    (empty_statement)
      )
  
 )




==============================================
Non-breaking spaces as whitespace
==============================================


⁠// Type definitions for Dexie v1.4.1
﻿// Project: https://github.com/dfahlander/Dexie.js
​// Definitions by: David Fahlander <http://github.com/dfahlander>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

---

(program
  (comment)
  (comment)
  (comment)
  (comment))



==============================================
Dictionary
==============================================
var dict = { "a" => 1, "b" => 2 };  // Creates a dictionary

-----
(program
  (variable_declaration
    (variable_declarator
      (identifier)
      (dictionary
        (pair
          (string
            (string_fragment))
          (number))
        (pair
          (string
            (string_fragment))
          (number)))))
  (comment))



 

==============================================
Array passed
==============================================

var frogs as Array<Frogs>;
var result = new Array<Array<Float>>[4];
var untypedArray = new [size];

var a = [ [4, 1 << (2 % 3)],
[1, (1 << 2) % 3]] as Array<Array>;

var b = [true, (4 + 5) instanceof Lang.Number];
var c = [true, ((4 + 5) has :toString) as Boolean];
var d_1 = [[2, 3], [-1, 4]];
var d_2 = { 1 ? 2 : 3 => 3, -1 => 4 }; 
var d = [[[2, 3], [-1, 4]], { 1 ? 2 : 3 => 3, -1 => 4 }];
var f_1 = true as Boolean ? true : false ; 
var f = [true, true as Boolean ? true : false];
var g = [false, null as Boolean? ? true : false];
var e = [true, 4e0 instanceof Lang.Float];
var h = [NaN, getNaN()];



var a = [ [4, 1 << (2 % 3)],
[1, (1 << 2) % 3],
[true, (4 + 5) instanceof Lang.Number],
[[[2, 3], [-1, 4]], { 1 ? 2 : 3 => 3, -1 => 4 }],
[true, 4e0 instanceof Lang.Float],
[true, true as Boolean ? true : false],
[false, null as Boolean? ? true : false],
[NaN, getNaN()],
] as Array<Array>;

function getExprs() as Array<Array> {
  return (
      [
          [4, 1 << (2 % 3)],
          [1, (1 << 2) % 3],
          [true, (4 + 5) instanceof Lang.Number],
          [true, ((4 + 5) has :toString) as Boolean],
          [[[2, 3], [-1, 4]], { 1 ? 2 : 3 => 3, -1 => 4 }],
          [true, 4e0 instanceof Lang.Float],
          [true, true as Boolean ? true : false],
          [false, null as Boolean? ? true : false],
          [NaN, getNaN()],
          [0x4l, 4l],
          [04l, 4l],
      ] as Array<Array>
  );
}



==============================================
Array
==============================================




