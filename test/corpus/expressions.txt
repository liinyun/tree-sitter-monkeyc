============================================
Functions
============================================
function initialize(a as Lang.Number ,b) {}
function init(a,b) {
  var c = 2;
	MenuInputDelegate.initializ();
}
-----
(program
  (function_declaration
    (identifier)
    (formal_parameters
      (parameter
        (typed_parameter
          (identifier)
          (type
            (member_expression
              (identifier)
              (property_identifier)))))
      (parameter
        (identifier)))
    (statement_block))

  (function_declaration
    (identifier)
    (formal_parameters
      (parameter
        (identifier))
      (parameter
        (identifier)))
  (statement_block
      (variable_declaration
        (variable_declarator
          (identifier)
          (number)
        )
      )
      (expression_statement
        (call_expression
          (member_expression
            (identifier)
            (property_identifier))
          (arguments))
        (empty_statement)
      ) 
    )
  )
)


============================================
Property access
============================================
x.someProperty;

(program
  (expression_statement
    (dotted_name
      (identifier)
      (identifier))
    (empty_statement)
      ) 
)





============================================
Chained Property access
============================================






============================================
Function calls
============================================
generateHandCoordinates(
    _screenCenterPoint,
    secondHand,
    60,
    20,
    2
);

---------
(program
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (identifier)
        (identifier)
        (number)
        (number)
        (number) 
      )
    )
  (empty_statement)
  )
)
 




============================================
Constructor calls
============================================
new module.Klass(1, "two");
new Thing();

-----
(program
  (expression_statement
    (new_expression
      (member_expression
          (identifier)
          (property_identifier))
      (arguments
        (number)
        (string
          (string_fragment))))
    (empty_statement))
  (expression_statement
    (new_expression
      (identifier)
      (arguments))
      (empty_statement))
)


============================================
Classes
============================================
class StopMenuDelegate {
	function initclass() {
		MenuInputDelegate.initializ();
	}
}

-----
(program
  (class_declaration
    (identifier) 
    (class_body
      (method_definition
        (property_identifier)
        (formal_parameters)
        (statement_block 
          (expression_statement
          (call_expression
            (member_expression
              (identifier)
              (property_identifier))
            (arguments))
            (empty_statement))) 
      )  
    )

  )
)




============================================
Class Property Fields
============================================
class Foo
{
    public const publicVar;
    protected var _protectedVar;
    private var _privateVar;

    public function initialize() {
        publicVar = "a";
        _protectedVar = "b";
        _privateVar = "c";
    }
}

------
(program
  (class_declaration
    (identifier)
    (class_body
      (field_definition
        (modifiers)
        (property_identifier))
      (field_definition
        (modifiers)
        (property_identifier))
      (field_definition
        (modifiers)
        (property_identifier))
      (method_definition
        (modifiers)
        (property_identifier)
        (formal_parameters)
        (statement_block
          (expression_statement
            (assignment_expression
              (pattern
                (identifier))
              (string
                (string_fragment)))
            (empty_statement))
          (expression_statement
            (assignment_expression
              (pattern
                (identifier))
              (string
                (string_fragment)))
            (empty_statement))
          (expression_statement
            (assignment_expression
              (pattern
                (identifier))
              (string
                (string_fragment)))
            (empty_statement)))))))



============================================
Private Class Property Fields
============================================





============================================
Arrays
============================================






============================================
Math operators
============================================

i++;
i--;
i + j * 3 - j % 5;

------
(program
  (expression_statement
    (update_expression
      (identifier))
    (empty_statement))
    (expression_statement
    (update_expression
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (binary_expression
          (identifier)
          (number)))
      (binary_expression
        (identifier)
        (number)))
        (empty_statement)
  )
)





============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

----------

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (binary_expression
        (unary_expression
          (identifier))
        (unary_expression
          (identifier)))
      (binary_expression
        (unary_expression
          (identifier))
        (unary_expression
          (identifier))))
    (empty_statement)
          ))



============================================
Bitwise operators
============================================

i >> j;
i << j;
i & j;
i | j;
~i ^ ~j;
-----

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
  (empty_statement)) 
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (unary_expression
        (identifier))
      (unary_expression
        (identifier)))
    (empty_statement)
        ))





============================================
Relational operators
============================================
x < y;
x <= y;
x == y;
x != y;
x >= y;
x > y;

---

(program
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
  (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement))
)



==============================================
Assignments
==============================================
x = 0;
x.y = 0;

------
(program
  (expression_statement
    (assignment_expression
      (pattern
        (identifier)
      )
      (number))
    (empty_statement)
      )
  (expression_statement
    (assignment_expression
      (pattern
        (attribute
          (identifier)
          (identifier)))
      (number))
      (empty_statement)
      )
)
 

==============================================
Ternaries
==============================================








==============================================
Type operators
==============================================

x instanceof String;
------

(program
 (expression_statement
    (binary_expression
      (identifier)
      (identifier))
    (empty_statement)
      ))



==============================================
Augmented assignments
==============================================

s |= 1;
t %= 2;
w ^= 3;
x += 4;
y.z *= 5;
async += 1;

---

(program
  (expression_statement
    (augmented_assignment_expression
      (pattern
      (identifier))
      (number))
    (empty_statement))
  (expression_statement
    (augmented_assignment_expression
      (pattern
      (identifier))
      (number))
    (empty_statement)
      )
  (expression_statement
    (augmented_assignment_expression
      (pattern
       (identifier))
      (number))
    (empty_statement)
      )
  (expression_statement
    (augmented_assignment_expression
      (pattern
       (identifier))
      (number))
    (empty_statement)
      )
  
  (expression_statement
    (augmented_assignment_expression
      (pattern
        (attribute
        (identifier)
        (identifier)))
      (number))
    (empty_statement)
      )

  (expression_statement
    (augmented_assignment_expression
      (pattern
       (identifier))
      (number))
    (empty_statement)
      )
)



==============================================
Operator precedence
==============================================

a <= b && c >= d;
a && b(c) && d;
a && b | c;
a - b << c;
a() + c.d;

-----

(program
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (identifier))
      (binary_expression
        (identifier)
        (identifier)))
    (empty_statement)
        )
  
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (identifier))))
      (identifier))
    (empty_statement))
 
  (expression_statement
    (binary_expression
      (identifier)
      (binary_expression
        (identifier)
        (identifier)))
    (empty_statement)
        )
  (expression_statement
    (binary_expression
      (binary_expression
        (identifier)
        (identifier))
      (identifier))
    (empty_statement)
      )
  (expression_statement
    (binary_expression
      (call_expression
        (identifier)
        (arguments))
      (member_expression
        (identifier)
        (property_identifier)))
    (empty_statement))
  )



==============================================
Forward slashes after parenthesized expressions
==============================================

(foo - bar) / baz;

---

(program
  (expression_statement
    (binary_expression
      (parenthesized_expression
        (binary_expression
          (identifier)
          (identifier)))
      (identifier))
    (empty_statement)
      )
  
 )




==============================================
Non-breaking spaces as whitespace
==============================================


⁠// Type definitions for Dexie v1.4.1
﻿// Project: https://github.com/dfahlander/Dexie.js
​// Definitions by: David Fahlander <http://github.com/dfahlander>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

---

(program
  (comment)
  (comment)
  (comment)
  (comment))



